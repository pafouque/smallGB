q:=2^32;
n:=5;
m:=n;
F:=GF(q);
N:=n+1;
P<[x]>:=PolynomialRing(F,n,"grevlex");

M2:=[ &*[P| x[i] : i in s] : s in Multisets({1..n},d), d in [0..2]];
Sort(~M2);
Reverse(~M2);
M1:=[ &*[P| x[i] : i in s] : s in Multisets({1..n},d), d in [0..1]];
Sort(~M1);
Reverse(~M1);

PolysToMat:=function(E);
if IsEmpty(E) then return E, []; end if;
P:=Parent(E[1]);
F:=BaseRing(P);
Mons:={ m : m in Monomials(g), g in E };
if IsEmpty(Mons) then return ZeroMatrix(F,#E,0),[]; end if;
Mons:=Setseq(Mons);
Sort(~Mons);
Reverse(~Mons);
return Matrix(F,#E,#Mons,[ MonomialCoefficient(g,mon) : mon in Mons, g in E]), Mons;
end function;
"PolysToMat Ok";


MatToPolys:=function(A,Mons);
if IsEmpty(Mons) then return []; end if;
P:=Parent(Mons[1]);
return Eltseq(Vector(Mons)*Matrix(P,Transpose(A)));
end function;
"MatToPolys Ok";

A:=HorizontalJoin(
ScalarMatrix(F,m,1),
Matrix(F,m,#M2-m,[Random(F): i in [1..m*(#M2-m)]])
);
Eqs:=Eltseq(Vector(M2)*Matrix(P,Transpose(A)));
G:=Eqs;
Gb:=GroebnerBasis(G);

//Classification of monomials and head monomials
HGB:={ LeadingMonomial(g) : g in Gb};
MonsGB:={ m : m in Monomials(g), g in Gb };
MI:={ m : m in MonsGB | not m in HGB };
MI1:={ m : m in MI | x[n] * m in MI};
MI2:={ m : m in MI | not x[n] * m in MI};
MI2z:={ x[n] * m : m in MI2};
MonsGBz:={ m : m in Monomials(g), g in Gb 
| LeadingMonomial(g) in MI2z };
assert MonsGBz eq MI join MI2z;

//precomputation
SGd:=[G];
S:=[];
Gd:=G;
for d:=3 to n+1 do;
G1:=GroebnerBasis(Gd,d);
D:=[ g : g in G1 | not g in Gd];
I:=IdealWithFixedBasis(Gd);
C:=[Coordinates(I,g): g in D];
M:=[{ m : m in Monomials(C[j][i]) , j in [1..#D] }: i in [1..#Gd]];
E:=[ m*Gd[i] : m in M[i], i in [1..#Gd]];
ME,Mons:=PolysToMat(E);
ME:=EchelonForm(ME);
E:=MatToPolys(ME,Mons);
Monoms:=[ [ Index(M1,mon) : mon in s] : s in M];
S cat:=[Monoms];
Gd cat:=[ g : g in E | not g in Gd];
Sort(~Gd);
Reverse(~Gd);
SGd cat:=[Gd];
end for;
"first step"; 


//filtering
//i.e. keep only monomials in MI2z
GG:=[];
HGG:=[];
for d:=1 to n do;
Gd:=SGd[d];
Gkeep:=[];
for g in Gd do;
if LeadingMonomial(g) in MI2z 
then Gkeep cat:=[g]; continue; end if;
keep:=false;
for dd:=d to n-1 do;
assert #S[dd] eq #SGd[dd];
if not IsZero(S[dd][Index(SGd[dd],g)]) then keep:=true; break; end if;
end for;
if keep then Gkeep cat:=[g]; continue; end if;
end for;
GG cat:=[Gkeep];
HGG cat:=[ Reverse(Sort([ LeadingMonomial(g) : g in Gkeep]))];
end for; //d

//fix the work to do
T:=[];
for d:=2 to n do;
MI:=S[d-1][[ Index(SGd[d-1],g) : g in GG[d-1]]];
M:= [ [ M1[i] : i in m ] : m in MI] ;
E:=[ m*GG[d-1][i] : m in M[i], i in [1..#GG[d-1]]];
ME,Mons:=PolysToMat(E);
ME:=EchelonForm(ME);
E:=MatToPolys(ME,Mons);
G1:=[ g: g in GG[d] | g in E and not g in GG[d-1]];
G2:=[ g: g in GG[d] | g in GG[d-1]];
assert GG[d] eq G1 cat G2;
I1:=[ Index(E,g): g in GG[d] | g in E and not g in GG[d-1]];
I2:=[ Index(GG[d-1],g): g in GG[d] | g in GG[d-1]];
T cat:=[ <MI,I1,I2> ];
end for;
S:=T;
"second step";

//change of Field
q:=257;
F:=GF(q);
P<[x]>:=PolynomialRing(F,n,"grevlex");
//univariate polynomial ring
Pz<z>:=PolynomialRing(F);

//utilitary function
convert:=function (l,P);
return Reverse(Sort([ Monomial(P,Exponents(m)) : m in l]));
end function;

//conversion : change of Field
M1:=convert(M1,P);
M2:=convert(M2,P);
MI:=convert(MI,P);
MI1:=convert(MI1,P);
MI2:=convert(MI2,P);
MI2z:=convert(MI2z,P);
HGB:=convert(HGB,P);
HGG:=[ convert(u,P) : u in HGG];
MonsGBz:=convert(MonsGBz,P);

//selection of Monomials
II2:=[ Index(MonsGBz,g) : g in MI];
II3:=[ Index(MI,g) : g in MI2];
II4:=[ Index(MI,g) : g in MI1];
II5:=[ Index(MI,x[n]*g) : g in MI1];


//draw statistics
iters:=1000;
Stats:={**};

for iter:=1 to iters do;
reason:="";
//draw a random System
A:=Matrix( F, n, #M2, [ Random(F) : i in [1..n*#M2]]);
A:=EchelonForm(A);
G:=MatToPolys(A,M2);
Gb:=GroebnerBasis(G);
if not HGB eq [ LeadingMonomial(g) : g in Gb] 
then 
reason cat:="not regular:";
else reason cat:="regular:";
end if;

regular:=true;
Gd:=G;
if not Seqset(HGG[1]) subset {LeadingMonomial(g) : g in Gd}
then 
reason cat:="not regular2:";
regular:=false;
end if;

// *******************************************
d:=2;
while regular and d le n do;
MI:=S[d-1][1];
I1:=S[d-1][2];
I2:=S[d-1][3];
M:=[ [M1[i]:i in mm] : mm in MI];
E:=[ mon*Gd[i] : mon in M[i], i in [1..#Gd]];
ME,MonsE:=PolysToMat(E);
ME:=EchelonForm(ME);
E:=MatToPolys(ME,MonsE);
Gd :=E[I1] cat Gd[I2];
if not Seqset(HGG[d]) subset 
{LeadingMonomial(g) : g in Gd | not IsZero(g)}
then 
reason cat:=Sprintf("not regular%o:",d);
regular:=false;
end if;
d+:=1;
end while;
if not regular then
Include(~Stats,reason);
continue;
end if;

//conversion from GRL to LEX
A,Mons:=PolysToMat(Gd);
//matrix of map x->x[n]*x
ME:=ZeroMatrix(F,#MI2,#MI);
for i in [1..#MI2] do;
for j in [1..#MI] do;
ME[i,j]:=-A[i,II2[j]];
end for;
end for;

//matrix of 1, x[n], x[n]^2, ...
MF:=ZeroMatrix(F,#MI,#MI);
MH:=ZeroMatrix(F,1,#MI2);
MF[1,#MI] := 1;
for i in [2..#MI] do;
for j in [1..#MI2] do;
MH[1,j] := MF[ i-1, II3[j]];
end for;
MF[i]:=MH[1]*ME;
for j in [1..#MI1] do;
MF[ i , II5[j] ] +:= MF[ i-1 , II4[j] ];
end for;
end for;

//matrix of 1, x[1], x[2], ..., x[n-1], x[n]^{2^n}
MG:=ZeroMatrix(F,n,#MI);

for j in [1..#MI2] do;
MH[1,j] := MF[ #MI, II3[j]];
end for;

MG[n]:= MH[1]*ME;
for j in [1..#MI1] do;
MG[ n , II5[j] ] +:= MF[ #MI , II4[j] ];
end for;

for i in [1..n-1] do;
MG[ i , #MI - 1 - n + i ] :=1;
end for;

b,MI:=IsConsistent(MF, MG);
if b then
pz:=z^(2^n) - &+[ z^(i-1) * MI[n,i] : i in [1..2^n]];
Z:=Roots(pz);
for u in Z do;
v:=[ &+[ (u[1])^(i-1) * MI[j,i] : i in [1..2^n]] : j in [1..n-1] ] cat [ u[1] ];
if not &and[ IsZero(Evaluate(g,v)) : g in G] then
reason cat:="err sol:";
end if;
end for;
reason cat:=Sprintf("Nb sols %o:",#Z);
else
reason cat:="FGLM fail:";
end if;

Include(~Stats,reason);


// *******************************************
end for;
Stats;
